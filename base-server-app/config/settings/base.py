"""
Django settings for baseserver project.

Generated by 'django-admin startproject' using Django 4.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("DJANGO_SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False
TESTING = sys.argv[1:2] == ["test"]
TEST_RUNNER = "config.helpers.CustomTestRunner"

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "rest_framework",
    "rest_framework.authtoken",
    "drf_yasg",
    "import_export",
    "health_check",  # required
    "health_check.db",  # stock Django health checkers
    "health_check.cache",
    "health_check.storage",
    "django_rest_passwordreset",
    "corsheaders",
    "social_django",
    "rest_social_auth",  # required for Frontend social auth; if server only can remove
    "config",
    "user_manager",
    "demo_manager",
    "silk",
    "django_filters",
    "debug_toolbar",
]

MIDDLEWARE = [
    "allow_cidr.middleware.AllowCIDRMiddleware",
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "corsheaders.middleware.CorsMiddleware",  # CorsMiddleware must be placed before other middleware that can generate responses,
    "django.middleware.security.SecurityMiddleware",
    "silk.middleware.SilkyMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "config.middleware.healthcheck.HealthCheckMiddleware",  # HealthCheckMiddleware must be placed before CommonMiddleware
    "config.middleware.slow_api.SlowAPIAlertMiddleware",  # SlowAPIAlertMiddleware must be placed before the CommonMiddleware
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "config.middleware.failed_api.FailedAPIAlertMiddleware",  # FailedAPIAlertMiddleware must be placed the bottom of other request middles
]

AUTH_USER_MODEL = "user_manager.User"

AUTHENTICATION_BACKENDS = (
    "social_core.backends.open_id.OpenIdAuth",
    "social_core.backends.google.GoogleOAuth2",
    "social_core.backends.google.GoogleOAuth",
    "django.contrib.auth.backends.ModelBackend",
)

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "social_django.context_processors.backends",
                "social_django.context_processors.login_redirect",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"

# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework.authentication.TokenAuthentication",
        "rest_framework.authentication.SessionAuthentication",
    ),
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
}

# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True

LOGIN_URL = "rest_framework:login"
LOGIN_REDIRECT_URL = "/"
LOGOUT_URL = "rest_framework:logout"
LOGOUT_REDIRECT_URL = "/admin"

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/
STATIC_ROOT = "static"
STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

FRONTEND_URL = "http://localhost:8080"
DEFAULT_FROM_EMAIL = "support@divertise.asia"
SUPER_ADMIN_PASS = os.environ.get("SUPER_ADMIN_PASS")

# Social Auth Config
SOCIAL_AUTH_JSONFIELD_ENABLED = True

# Social Google Auth Config
SOCIAL_AUTH_GOOGLE_OAUTH2_KEY = os.environ.get("SOCIAL_AUTH_GOOGLE_OAUTH2_KEY")
SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET = os.environ.get("SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET")
SCOPE = [
    "openid",
    "email",
    "https://www.googleapis.com/auth/userinfo.profile",
]  # scopes should be matched to frontend

# Social Google Auth auto create Profile
SOCIAL_AUTH_AUTO_CREATE_PROFILE = True
SOCIAL_AUTH_AUTO_VERIFY_USER = True

# Slow API Alert Middleware
SLOW_API_ALERT_NAMESPACES = ["demo", "v1", "rest_framework", "social", "password_reset"]
SLOW_API_ALERT_AT_MS = 30000  # will alert when request take time >= 30 secs

# Failed API Alert Middleware
FAILED_API_ALERT_NAMESPACES = SLOW_API_ALERT_NAMESPACES
FAILED_API_ALERT_STATUS_CODES = [400]

FILE_UPLOAD_HANDLERS = [
    "django.core.files.uploadhandler.TemporaryFileUploadHandler",
]


def get_database_dict():
    import re

    heroku_db_details = dict()
    HEROKU_DATABASE_URL = os.environ.get("DATABASE_URL")

    if HEROKU_DATABASE_URL:
        match_db_url = re.match(
            r"^postgres://(?P<RDS_USERNAME>\S+):(?P<RDS_PASSWORD>\S+)@(?P<RDS_HOST>\S+):(?P<RDS_PORT>\S+)/(?P<RDS_DB_NAME>\S+)$",
            HEROKU_DATABASE_URL,
        )
        if match_db_url:
            heroku_db_details = match_db_url.groupdict()

    def get_from_environ_or_heroku(key, default=""):
        return os.environ.get(key, heroku_db_details.get(key, default))

    return {
        "ENGINE": get_from_environ_or_heroku(
            "RDS_ENGINE", "django.db.backends.postgresql"
        ),
        "NAME": get_from_environ_or_heroku("RDS_DB_NAME"),
        "USER": get_from_environ_or_heroku("RDS_USERNAME"),
        "PASSWORD": get_from_environ_or_heroku("RDS_PASSWORD"),
        "HOST": get_from_environ_or_heroku("RDS_HOST"),
        "PORT": get_from_environ_or_heroku("RDS_PORT", "5432"),
    }
